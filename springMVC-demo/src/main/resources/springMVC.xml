<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
         http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
	<!--主动扫描Controller的配置，使得控制器能够扫描到相关的类 -->
	<context:component-scan base-package="com.celloud" />
	<mvc:annotation-driven />
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 静态资源配置 -->
	<mvc:resources mapping="/js/**" location="/resources/js/" />
	<mvc:resources mapping="/css/**" location="/resources/css/" />
	<mvc:resources mapping="/img/**" location="/resources/img/" />
	<mvc:resources mapping="/plugin/**" location="/resources/plugin/" />
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<!--配置一个返回视图用的bean，下面的这个class整合了jstl技术 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/pages/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:mongodb.properties</value>
			</list>
		</property>
	</bean>
	<bean id="yamlMap" class="org.springframework.beans.factory.config.YamlMapFactoryBean">
		<property name="resources">
			<list>
				<value>classpath:alimq.yaml</value>
			</list>
		</property>
		<property name="resolutionMethod" value="FIRST_FOUND" />
	</bean>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}" />
	</bean>
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/celloud/mapper/*.xml" />
	</bean>
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.celloud.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 文件上传配置 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="10485760000"></property>
		<property name="maxInMemorySize" value="40960"></property>
	</bean>
	<!-- 异常处理配置 -->
	<bean id="exceptionHandler" class="com.celloud.exception.ExceptionHandler" />
	<!-- 启动面向切面的自动代理 -->
	<aop:aspectj-autoproxy />
	<!-- 即使启动了面向切面的自动代理模式，也要把切面类注册成spring的bean -->
	<bean class="com.celloud.interceptor.DaoAspect" />
	<!-- 拦截器配置 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/js/**" />
			<mvc:exclude-mapping path="/img/**" />
			<mvc:exclude-mapping path="/css/**" />
			<mvc:exclude-mapping path="/plugin/**" />
			<mvc:exclude-mapping path="/resources/**" />
			<bean class="com.celloud.interceptor.TestInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/interceptor/*" />
			<bean class="com.celloud.interceptor.TimeInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/interceptor/*" />
			<bean class="com.celloud.interceptor.LogInterceptor" />
		</mvc:interceptor>
		<!-- 默认拦截所以请求，包括静态资源，可将其加入<mvc:interceptor>标签中，自定义path，然后排除静态资源 -->
		<!-- <bean class="com.celloud.interceptor.TestInterceptor" /> -->
	</mvc:interceptors>
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务传递特性 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="query" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.celloud.service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

	<!-- 定义mongo对象，对应的是mongodb官方jar包中的Mongo，replica-set设置集群副本的ip地址和端口 -->
	<!-- <mongo:mongo id="mongo" replica-set="${mongo.hostport}"> 一些连接属性的设置 <mongo:options threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}" connect-timeout="${mongo.connectTimeout}" 
		max-wait-time="${mongo.maxWaitTime}" auto-connect-retry="${mongo.autoConnectRetry}" socket-keep-alive="${mongo.socketKeepAlive}" socket-timeout="${mongo.socketTimeout}" slave-ok="${mongo.slaveOk}" write-number="1" 
		write-timeout="0" write-fsync="true" /> </mongo:mongo> <mongo:db-factory dbname="database" mongo-ref="mongo" /> <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate"> <constructor-arg 
		ref="mongo" /> <constructor-arg name="databaseName" value="${mongo.database}" /> </bean> -->

	<bean id="mongoServerAddress" class="com.mongodb.ServerAddress">
		<constructor-arg value="${mongo.host}" />
		<constructor-arg value="${mongo.port}" />
	</bean>
	<!-- 如果没有启用mongodb的用户验证，可不使用此配置 -->
	<!-- <bean id="mongoCredential" class="com.mongodb.MongoCredential" factory-method="createCredential"> 构造Credential的方法的参数，顺序不能改变 <constructor-arg value="${mongo.username}" /> <constructor-arg value="${mongo.database}" 
		/> <constructor-arg value="${mongo.password}" /> </bean> -->
	<bean id="mongoClient" class="com.mongodb.MongoClient" destroy-method="close">
		<constructor-arg ref="mongoServerAddress" />
		<!-- <constructor-arg> <list> <ref bean="mongoCredential" /> </list> </constructor-arg> -->
	</bean>
	<bean id="morphia" class="org.mongodb.morphia.Morphia" />
	<bean id="datastore" class="org.mongodb.morphia.Datastore" factory-bean="morphia" factory-method="createDatastore">
		<constructor-arg ref="mongoClient" />
		<constructor-arg value="${mongo.database}" />
	</bean>
	<!-- shiro权限管理相关配置 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" />
		<property name="filterChainDefinitions">
			<value>
				/js/** = anon
				/img/** = anon
				/css/** = anon
				/plugin/** = anon
				/resources/** = anon
				/home/** = anon
				/home** = anon
				/feedback/save = anon
				/**/*.html = anon
				/api/** = anon
				/login/** = anon
				/logout/** = anon
				/pages/** = anon
				/params/** = anon
				/** = anon
			</value>
		</property>
	</bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
	</bean>
	<bean id="userRealm" class="com.celloud.shiro.UserRealm">
	</bean>
</beans>